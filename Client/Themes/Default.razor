@using System.Net
@namespace Oqtane.Theme.Corporate
@inherits ThemeBase
@inject NavigationManager NavigationManager
@inject ISettingService SettingService
@inject IStringLocalizer<Default> Localizer

<!-- Header -->
<header id="header" class="@_headerclass">
    <div class="container-fluid container-xl position-relative d-flex align-items-center">
        <a href="@PageState.Alias.Path" class="logo d-flex align-items-center me-auto">
            @if (PageState.Site.LogoFileId != null)
            {
                <img class="img-fluid" src="@Utilities.FileUrl(PageState.Alias, PageState.Site.LogoFileId.Value)" alt="@PageState.Site.Name" />
            }
            else
            {
                <h1 class="sitename">@PageState.Site.Name</h1>
            }
        </a>
        <nav id="navmenu" class="navmenu">
            <NavMenu />
        </nav>
        @if (!string.IsNullOrEmpty(_navbuttontext) && !string.IsNullOrEmpty(_navbuttonurl))
        {
            <a class="btn-getstarted" href="@_navbuttonurl">@_navbuttontext</a>
        }
        <div class="mx-3 controls-group">
            @if (_search)
            {
                <Search AllowTextInput="false" />
            }
            <UserProfile /> <Login ShowLogin="@_login" /> <ControlPanel />
        </div>
    </div>
</header>
<!-- End Header -->

<!-- Main Section -->
<main class="main">
    @if (!string.IsNullOrEmpty(_hero))
    {
        <!-- Hero Section -->
        @((MarkupString)_hero)
        <!-- End Hero Section -->
    }
    else
    {
        <!-- Page Title -->
        <div class="page-title" data-aos="fade">
            <div class="container">
                <Breadcrumbs />
                <h1>@PageState.Page.Name</h1>
            </div>
        </div>
        <!-- End Page Title -->
    }
    @if (!PageState.Site.Settings.ContainsKey(GetType().Namespace + ":Login") && UserSecurity.IsAuthorized(PageState.User, PermissionNames.Edit, PageState.Page.PermissionList))
    {
        <div class="text-center my-2"><a href="@_themesettingsurl" class="btn btn-primary">Configure Theme Settings</a></div>
    }
    <Pane Name="@PaneNames.Default" />
</main>
<!-- End Main -->

@if (!string.IsNullOrEmpty(_footer))
{
    <!-- Footer Section -->
    @((MarkupString)_footer)
    <!-- End Footer -->
}

<CookieConsent />

<!-- Scroll Top -->
<a href="@NavigateUrl()" id="scroll-top" class="scroll-top d-flex align-items-center justify-content-center"><i class="bi bi-arrow-up-short"></i></a>

@code {
    public override string Name => "Default";
    public override string Panes => PaneNames.Default;

    private string _headerclass = "";
    private bool _login = true;
    private bool _search = true;
    private string _navbuttontext = "";
    private string _navbuttonurl = "";
    private string _hero = "";
    private string _footer = "";
    private string _themesettingsurl = "";

    protected override void OnParametersSet()
    {
        try
        {
            // page settings
            _headerclass = "header d-flex align-items-center sticky-top";
            _hero = SettingService.GetSetting(PageState.Page.Settings, GetType().Namespace + ":Hero", "");
            if (!string.IsNullOrEmpty(_hero))
            {
                _headerclass = "header d-flex align-items-center fixed-top";
                _hero = Utilities.FormatContent(_hero, PageState.Alias, "render");
            }

            // site settings
            _login = bool.Parse(SettingService.GetSetting(PageState.Site.Settings, GetType().Namespace + ":Login", "True"));
            _search = bool.Parse(SettingService.GetSetting(PageState.Site.Settings, GetType().Namespace + ":Search", "True"));
            _navbuttontext = SettingService.GetSetting(PageState.Site.Settings, GetType().Namespace + ":NavButtonText", "");
            _navbuttonurl = SettingService.GetSetting(PageState.Site.Settings, GetType().Namespace + ":NavButtonUrl", "");
            _footer = SettingService.GetSetting(PageState.Site.Settings, GetType().Namespace + ":Footer", "");
            _footer = Utilities.FormatContent(_footer, PageState.Alias, "render");

            var moduleId = int.Parse(PageState.Site.Settings[Constants.PageManagementModule]);
            _themesettingsurl = Utilities.EditUrl(PageState.Alias.Path, "admin/pages", moduleId, "edit", $"id={PageState.Page.PageId}&tab=ThemeSettings&returnurl={WebUtility.UrlEncode(PageState.Route.PathAndQuery)}");
        }
        catch
        {
            // not implemented
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        var interop = new Interop(JSRuntime);
        await interop.Load();
    }
}
