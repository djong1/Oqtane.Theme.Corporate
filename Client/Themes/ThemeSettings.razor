@namespace Oqtane.Theme.Arsha
@inherits ModuleBase
@implements Oqtane.Interfaces.ISettingsControl
@inject ISettingService SettingService
@inject IStringLocalizer<Default> Localizer
@attribute [OqtaneIgnore]

<div class="container">
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="heroHTML" HelpText="Specify if you wish to include a hero section for this page">Hero Section?</Label>
        <div class="col-sm-9">
            <select id="heroHTML" class="form-select" value="@_hero" @onchange="(e => HeroChanged(e))">
                <option value="True">Yes</option>
                <option value="False">No</option>
            </select>
            @if (_hero == "True")
            {
                <textarea id="_heroHTML" class="form-control" @bind="@_heroHTML" rows="5"></textarea>
            }
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="_footerHTML" HelpText="Specify if you wish to include a footer section for this site">Footer Section?</Label>
        <div class="col-sm-9">
            <select id="footerHTML" class="form-select" value="@_footer" @onchange="(e => FooterChanged(e))">
                <option value="True">Yes</option>
                <option value="False">No</option>
            </select>
            @if (_footer == "True")
            {
                <textarea id="footerHTML" class="form-control" @bind="@_footerHTML" rows="5"></textarea>
            }
        </div>
    </div>
</div>

@code {
    private int pageId = -1;
    private string _hero = "False";
    private string _heroHTML = "";
    private string _footer = "False";
    private string _footerHTML = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.QueryString.ContainsKey("id"))
            {
                pageId = int.Parse(PageState.QueryString["id"]);
            }
            await LoadSettings();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Settings {Error}", ex.Message);
            AddModuleMessage("Error Loading Settings", MessageType.Error);
        }
    }

    private async Task LoadSettings()
    {
        var settings = await SettingService.GetPageSettingsAsync(pageId);
        _heroHTML = SettingService.GetSetting(settings, GetType().Namespace + ":Hero", "");
        _hero = (_heroHTML == "") ? "False" : "True";

        settings = PageState.Site.Settings;
        _footerHTML = SettingService.GetSetting(settings, GetType().Namespace + ":Footer", "");
        _footer = (_footerHTML == "") ? "False" : "True";
    }

    private void HeroChanged(ChangeEventArgs eventArgs)
    {
        _hero = (string)eventArgs.Value;
        if (bool.Parse(_hero))
        {
            if (_heroHTML == "")
            {
                _heroHTML = Localizer["Hero"];
            }
        }
        else
        {
            _heroHTML = "";
        }
    }

    private void FooterChanged(ChangeEventArgs eventArgs)
    {
        _footer = (string)eventArgs.Value;
        if (bool.Parse(_footer))
        {
            if (_footerHTML == "")
            {
                _footerHTML = Localizer["Footer"];
            }
        }
        else
        {
            _footerHTML = "";
        }
    }

    public async Task UpdateSettings()
    {
        try
        {
            var settings = await SettingService.GetPageSettingsAsync(pageId);
            settings = SettingService.SetSetting(settings, GetType().Namespace + ":Hero", _heroHTML);
            await SettingService.UpdatePageSettingsAsync(settings, pageId);

            settings = await SettingService.GetSiteSettingsAsync(PageState.Site.SiteId);
            settings = SettingService.SetSetting(settings, GetType().Namespace + ":Footer", _footerHTML);
            await SettingService.UpdateSiteSettingsAsync(settings, PageState.Site.SiteId);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving Settings {Error}", ex.Message);
            AddModuleMessage("Error Saving Settings", MessageType.Error);
        }
    }
}
